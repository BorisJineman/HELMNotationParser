<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="QR022" name="Default test" tests="145" failures="0" timestamp="4 Nov 2015 14:52:25 GMT" time="1.144" errors="0">
  <testcase name="testGroupRepeating" time="0.019" classname="NotationTest.PolymerNotationTest"/>
  <testcase name="testInputCount" time="0.002" classname="NotationTest.PolymerNotationTest"/>
  <testcase name="testInputGroupMixture" time="0.002" classname="NotationTest.PolymerNotationTest"/>
  <testcase name="testInputGroupOr" time="0.002" classname="NotationTest.PolymerNotationTest"/>
  <testcase name="testSimpleInput" time="0.022" classname="NotationTest.PolymerNotationTest"/>
  <testcase name="testHELM2Output" time="0.018" classname="NotationTest.OutputWriterTest"/>
  <testcase name="testHELM2OutputExtended" time="0.012" classname="NotationTest.OutputWriterTest"/>
  <testcase name="goToFinalState" time="0.001" classname="parsertest.AnnotationSectionTest.AnnotationParserTest"/>
  <testcase name="keepThisState" time="0.0" classname="parsertest.AnnotationSectionTest.AnnotationParserTest"/>
  <testcase name="keepToFinalStateWithException" time="0.0" classname="parsertest.AnnotationSectionTest.AnnotationParserTest"/>
  <testcase name="testMonomerNotationAnnotation" time="0.001" classname="NotationTest.Polymer.MonomerNotationTest"/>
  <testcase name="testMonomerNotationCount" time="0.0" classname="NotationTest.Polymer.MonomerNotationTest"/>
  <testcase name="testMonomerNotationDefaultAnnotation" time="0.0" classname="NotationTest.Polymer.MonomerNotationTest"/>
  <testcase name="testMonomerNotationDefaultCount" time="0.001" classname="NotationTest.Polymer.MonomerNotationTest"/>
  <testcase name="testMonomerNotationID" time="0.0" classname="NotationTest.Polymer.MonomerNotationTest"/>
  <testcase name="testMonomerNotationIDValue" time="0.001" classname="NotationTest.Polymer.MonomerNotationTest"/>
  <testcase name="testMonomerNotationID_" time="0.0" classname="NotationTest.Polymer.MonomerNotationTest"/>
  <testcase name="testGrouping" time="0.001" classname="NotationTest.Grouping.GroupingAmbiguityTest"/>
  <testcase name="ReadingWithException" time="0.001" classname="parsertest.GroupingSectionTest.BetweenGroupingParserTest"/>
  <testcase name="goToAnnotationsParser" time="0.0" classname="parsertest.GroupingSectionTest.BetweenGroupingParserTest"/>
  <testcase name="goToGroupingParser" time="0.0" classname="parsertest.GroupingSectionTest.BetweenGroupingParserTest"/>
  <testcase name="testConstructor" time="0.0" classname="NotationTest.Polymer.MonomerNotationGroupGroupElementTest"/>
  <testcase name="testConstructorRange" time="0.0" classname="NotationTest.Polymer.MonomerNotationGroupGroupElementTest"/>
  <testcase name="goToConnectionsReadSecondIDParser" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsParserTest"/>
  <testcase name="goToConnectionsReadSecondIDParserWithException" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsParserTest"/>
  <testcase name="goToGroupingParser" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsParserTest"/>
  <testcase name="goToGroupingParserWithException" time="0.0" classname="parsertest.ConnectionSectionTest.ConnectionsParserTest"/>
  <testcase name="keepThisState" time="0.0" classname="parsertest.ConnectionSectionTest.ConnectionsParserTest"/>
  <testcase name="goToBetweenParser" time="0.001" classname="parsertest.SimplePolymersSectionTest.RepeatingMonomerParserTest"/>
  <testcase name="goToBetweenParserRange" time="0.001" classname="parsertest.SimplePolymersSectionTest.RepeatingMonomerParserTest"/>
  <testcase name="goToBetweenParserRangeWithException" time="0.001" classname="parsertest.SimplePolymersSectionTest.RepeatingMonomerParserTest"/>
  <testcase name="goToBetweenParserWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.RepeatingMonomerParserTest"/>
  <testcase name="keepThisStateTest" time="0.0" classname="parsertest.SimplePolymersSectionTest.RepeatingMonomerParserTest"/>
  <testcase name="goToFinalStateWithException" time="0.001" classname="parsertest.FinalStateTest"/>
  <testcase name="testConnectionGrouping" time="0.023" classname="NotationTest.ConnectionNotationTest"/>
  <testcase name="testConnectionNotation" time="0.018" classname="NotationTest.ConnectionNotationTest"/>
  <testcase name="testConnectionNotationTwo" time="0.019" classname="NotationTest.ConnectionNotationTest"/>
  <testcase name="goToBetweenInlineConnectionParser" time="0.001" classname="parsertest.InlineAnnotationsParserTest"/>
  <testcase name="goToBetweenParser" time="0.001" classname="parsertest.InlineAnnotationsParserTest"/>
  <testcase name="goToSimplePolymersNotationParserParser" time="0.001" classname="parsertest.InlineAnnotationsParserTest"/>
  <testcase name="keepThisState" time="0.0" classname="parsertest.InlineAnnotationsParserTest"/>
  <testcase name="goToGroupingParser" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsDetailsParserTest"/>
  <testcase name="goToGroupingParserWithException" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsDetailsParserTest"/>
  <testcase name="goToInlineAnnotationsParser" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsDetailsParserTest"/>
  <testcase name="goToInlineAnnotationsParserWithException" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsDetailsParserTest"/>
  <testcase name="keepThisState" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsDetailsParserTest"/>
  <testcase name="testAnnotationNotation" time="0.162" classname="NotationTest.JSONTest"/>
  <testcase name="Reading$WithException" time="0.0" classname="parsertest.ConnectionSectionTest.BetweenInlineConnectionParserTest"/>
  <testcase name="goToConnectionsParser" time="0.0" classname="parsertest.ConnectionSectionTest.BetweenInlineConnectionParserTest"/>
  <testcase name="goToGroupingSection" time="0.0" classname="parsertest.ConnectionSectionTest.BetweenInlineConnectionParserTest"/>
  <testcase name="testConnectionMonomer" time="0.02" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="testConnectionMonomerAmbiguity" time="0.016" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="testConnectionMonomerAmbiguityNoInformation" time="0.016" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="testConnectionMonomerAmbiguityPartlyInformation" time="0.015" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="testConnectionStatisticalBinding" time="0.005" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="testConnectionUnknownBinding" time="0.006" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="testHydrogenBondInConnectionSection" time="0.004" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="testInlineAnnotationsConnection" time="0.015" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="testInlineAnnotationsConnectionWithException" time="0.02" classname="parsertest.ConnectionSectionTest.TestInputConnectionSection"/>
  <testcase name="goToConnectionSectionTest" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersParserTest"/>
  <testcase name="goToSimplePolymersNotationParserTest" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersParserTest"/>
  <testcase name="goToSimplePolymersNotationParserTestWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersParserTest"/>
  <testcase name="keepThisStateTest" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersParserTest"/>
  <testcase name="Reading$WithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.BetweenParserTest"/>
  <testcase name="goToConnectionsParser" time="0.0" classname="parsertest.SimplePolymersSectionTest.BetweenParserTest"/>
  <testcase name="goToInlineAnnotationsParser" time="0.001" classname="parsertest.SimplePolymersSectionTest.BetweenParserTest"/>
  <testcase name="goToSimplePolymersParser" time="0.0" classname="parsertest.SimplePolymersSectionTest.BetweenParserTest"/>
  <testcase name="testConstructorList" time="0.0" classname="NotationTest.Polymer.PolymerElementsTest"/>
  <testcase name="testConstructorSingle" time="0.0" classname="NotationTest.Polymer.PolymerElementsTest"/>
  <testcase name="goToConnection" time="0.0" classname="parsertest.SimplePolymersSectionTest.BetweenInlineMonomerParser"/>
  <testcase name="goToSimplePolymerNotationParser" time="0.001" classname="parsertest.SimplePolymersSectionTest.BetweenInlineMonomerParser"/>
  <testcase name="goToWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.BetweenInlineMonomerParser"/>
  <testcase name="testGroupingAndOr" time="0.015" classname="NotationTest.GroupingNotationTest"/>
  <testcase name="testGroupingNotationMixture" time="0.014" classname="NotationTest.GroupingNotationTest"/>
  <testcase name="testGroupingNotationMixtureRange" time="0.014" classname="NotationTest.GroupingNotationTest"/>
  <testcase name="testGroupingNotationMixtureValue" time="0.014" classname="NotationTest.GroupingNotationTest"/>
  <testcase name="testGroupingNotationOR" time="0.014" classname="NotationTest.GroupingNotationTest"/>
  <testcase name="testGroupingNotationOrDefaultValue" time="0.014" classname="NotationTest.GroupingNotationTest"/>
  <testcase name="goToBetweenGroupingParser" time="0.001" classname="parsertest.GroupingSectionTest.GroupingDetailedInformationParserTest"/>
  <testcase name="goToBetweenGroupingParserWithException" time="0.0" classname="parsertest.GroupingSectionTest.GroupingDetailedInformationParserTest"/>
  <testcase name="keepThisState" time="0.0" classname="parsertest.GroupingSectionTest.GroupingDetailedInformationParserTest"/>
  <testcase name="goToBetweenParser" time="0.001" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="goToInlineAnnotaitonsParser" time="0.001" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="goToInlineAnnotaitonsParserWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="goToRepeatingMonomerParser" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="goToRepeatingMonomerParserWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="initalizeThisStateTest" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="initalizeThisStateTestWithException" time="0.001" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="keepThisStateTest" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="testSMILESFunction" time="0.001" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="testSMILESFunctionWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.SimplePolymersNotationParserTest"/>
  <testcase name="testAnnotationConstructor" time="0.001" classname="NotationTest.Annotation.AnnotationNotationTest"/>
  <testcase name="testConstructor" time="0.0" classname="NotationTest.Grouping.GroupingElementTest"/>
  <testcase name="testConstructorTwo" time="0.001" classname="NotationTest.Grouping.GroupingElementTest"/>
  <testcase name="SMILESTest" time="0.014" classname="parsertest.ConverterHELM1ToHELM2Test"/>
  <testcase name="simpleHELM1StringTest" time="0.003" classname="parsertest.ConverterHELM1ToHELM2Test"/>
  <testcase name="MonomerNotationGroupTestAND" time="0.0" classname="NotationTest.Polymer.MonomerNotationGroupTest"/>
  <testcase name="MonomerNotationGroupTestOr" time="0.0" classname="NotationTest.Polymer.MonomerNotationGroupTest"/>
  <testcase name="goToBetweenParser" time="0.001" classname="parsertest.SimplePolymersSectionTest.BetweenMonomerParserTest"/>
  <testcase name="goToInlineAnnotationParser" time="0.0" classname="parsertest.SimplePolymersSectionTest.BetweenMonomerParserTest"/>
  <testcase name="goToSimplePolymerNotationParser" time="0.001" classname="parsertest.SimplePolymersSectionTest.BetweenMonomerParserTest"/>
  <testcase name="goToWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.BetweenMonomerParserTest"/>
  <testcase name="testNegativeInput" time="0.026" classname="NotationTest.NotationTest"/>
  <testcase name="testPositiveInput" time="0.376" classname="NotationTest.NotationTest"/>
  <testcase name="goToAnnotaitonsParserWithException" time="0.001" classname="parsertest.GroupingSectionTest.GroupingParserTest"/>
  <testcase name="goToAnnotationsParser" time="0.0" classname="parsertest.GroupingSectionTest.GroupingParserTest"/>
  <testcase name="goToGroupingDetailedInformationParser" time="0.0" classname="parsertest.GroupingSectionTest.GroupingParserTest"/>
  <testcase name="goToGroupingDetailedInformationWithException" time="0.0" classname="parsertest.GroupingSectionTest.GroupingParserTest"/>
  <testcase name="keepThisState" time="0.0" classname="parsertest.GroupingSectionTest.GroupingParserTest"/>
  <testcase name="testSimpleInput" time="0.005" classname="parsertest.AnnotationSectionTest.TestInputAnnotationSection"/>
  <testcase name="testPolymerNotationAnnotation" time="0.0" classname="NotationTest.Polymer.PolymerNotationTest"/>
  <testcase name="testPolymerNotationIDBLOB" time="0.0" classname="NotationTest.Polymer.PolymerNotationTest"/>
  <testcase name="testPolymerNotationIDBLOBWithException" time="0.001" classname="NotationTest.Polymer.PolymerNotationTest"/>
  <testcase name="testPolymerNotationIDCHEM" time="0.0" classname="NotationTest.Polymer.PolymerNotationTest"/>
  <testcase name="testPolymerNotationIDPEPTIDE" time="0.001" classname="NotationTest.Polymer.PolymerNotationTest"/>
  <testcase name="testPolymerNotationIDRNA" time="0.0" classname="NotationTest.Polymer.PolymerNotationTest"/>
  <testcase name="testConstructor" time="0.0" classname="NotationTest.Grouping.GroupingNotationTest"/>
  <testcase name="testConstructorAmbiguityAND" time="0.0" classname="NotationTest.Grouping.GroupingNotationTest"/>
  <testcase name="testConstructorAmbiguityOR" time="0.0" classname="NotationTest.Grouping.GroupingNotationTest"/>
  <testcase name="testConstructorWithException" time="0.0" classname="NotationTest.Grouping.GroupingNotationTest"/>
  <testcase name="testAnnotationNotation" time="0.002" classname="NotationTest.AnnotationNotationTest"/>
  <testcase name="testGlycosylation" time="0.036" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testInlineAnnoationsInBrackets" time="0.001" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testInlineAnnoationsWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testInlineAnnotations" time="0.004" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testInlineAnnotationsPolymer" time="0.008" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testInlineAnnotationsPolymerUnknown" time="0.0" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testInlineAnnotationsPolymerWithException" time="0.005" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testLysineThereOrNot" time="0.008" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testMonomerRepeating" time="0.0" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testMonomerRepeatingRange" time="0.0" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testMonomerRepeatingUnits" time="0.002" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testMonomerRepeatingUnitsWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testNewSimplePolymerType" time="0.002" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testRepeatedFragments" time="0.001" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testRepeatedFragmentsWithException" time="0.0" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="testSimpleInput" time="0.009" classname="parsertest.SimplePolymersSectionTest.TestInputSimplePolymerSection"/>
  <testcase name="goToConnectionsDetailsParser" time="0.0" classname="parsertest.ConnectionSectionTest.ConnectionsReadSecondIDParserTest"/>
  <testcase name="goToConnectionsDetailsParserWithException" time="0.001" classname="parsertest.ConnectionSectionTest.ConnectionsReadSecondIDParserTest"/>
  <testcase name="testGroupingAmbiguityAnd" time="0.009" classname="parsertest.GroupingSectionTest.TestInputGroupingSection"/>
  <testcase name="testGroupingAmbiguityAndRatio" time="0.011" classname="parsertest.GroupingSectionTest.TestInputGroupingSection"/>
  <testcase name="testGroupingAmbiguityAndRatioAndRange" time="0.001" classname="parsertest.GroupingSectionTest.TestInputGroupingSection"/>
  <testcase name="testGroupingAmbiguityOr" time="0.008" classname="parsertest.GroupingSectionTest.TestInputGroupingSection"/>
  <testcase name="testGroupingUnknownRatio" time="0.001" classname="parsertest.GroupingSectionTest.TestInputGroupingSection"/>
  <testcase name="testEntity" time="0.0" classname="NotationTest.Polymer.EntityTest"/>
</testsuite> <!-- Default test -->
