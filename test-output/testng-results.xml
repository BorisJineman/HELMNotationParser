<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="58" passed="58">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="988" started-at="2015-12-04T09:28:08Z" finished-at="2015-12-04T09:28:09Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="988" started-at="2015-12-04T09:28:08Z" finished-at="2015-12-04T09:28:09Z">
      <class name="org.helm.notation2.parser.grouping.GroupingElementTest">
        <test-method status="PASS" signature="testConstructor()[pri:0, instance:org.helm.notation2.parser.grouping.GroupingElementTest@71862303]" name="testConstructor" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructor -->
        <test-method status="PASS" signature="testConstructorTwo()[pri:0, instance:org.helm.notation2.parser.grouping.GroupingElementTest@71862303]" name="testConstructorTwo" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructorTwo -->
      </class> <!-- org.helm.notation2.parser.grouping.GroupingElementTest -->
      <class name="org.helm.notation2.parser.polymer.PolymerElementsTest">
        <test-method status="PASS" signature="testConstructorList()[pri:0, instance:org.helm.notation2.parser.polymer.PolymerElementsTest@a22c86e]" name="testConstructorList" duration-ms="1" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructorList -->
        <test-method status="PASS" signature="testConstructorSingle()[pri:0, instance:org.helm.notation2.parser.polymer.PolymerElementsTest@a22c86e]" name="testConstructorSingle" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <exception class="org.helm.notation2.parser.exceptionparser.SimplePolymerSectionException">
            <message>
              <![CDATA[Only one Monomer unit is allowed for CHEM and BLOB]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.helm.notation2.parser.exceptionparser.SimplePolymerSectionException: Only one Monomer unit is allowed for CHEM and BLOB
	at org.helm.notation2.parser.notation.polymer.PolymerSingleElements.addMonomerNotation(PolymerSingleElements.java:72)
	at org.helm.notation2.parser.polymer.PolymerElementsTest.testConstructorSingle(PolymerElementsTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:112)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:205)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:176)
]]>
            </full-stacktrace>
          </exception> <!-- org.helm.notation2.parser.exceptionparser.SimplePolymerSectionException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructorSingle -->
      </class> <!-- org.helm.notation2.parser.polymer.PolymerElementsTest -->
      <class name="org.helm.notation2.parser.PolymerNotationTest">
        <test-method status="PASS" signature="testGroupRepeating()[pri:0, instance:org.helm.notation2.parser.PolymerNotationTest@76ff6c19]" name="testGroupRepeating" duration-ms="1" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupRepeating -->
        <test-method status="PASS" signature="testInputCount()[pri:0, instance:org.helm.notation2.parser.PolymerNotationTest@76ff6c19]" name="testInputCount" duration-ms="1" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInputCount -->
        <test-method status="PASS" signature="testInputGroupMixture()[pri:0, instance:org.helm.notation2.parser.PolymerNotationTest@76ff6c19]" name="testInputGroupMixture" duration-ms="1" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInputGroupMixture -->
        <test-method status="PASS" signature="testInputGroupOr()[pri:0, instance:org.helm.notation2.parser.PolymerNotationTest@76ff6c19]" name="testInputGroupOr" duration-ms="1" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInputGroupOr -->
        <test-method status="PASS" signature="testSimpleInput()[pri:0, instance:org.helm.notation2.parser.PolymerNotationTest@76ff6c19]" name="testSimpleInput" duration-ms="10" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleInput -->
      </class> <!-- org.helm.notation2.parser.PolymerNotationTest -->
      <class name="org.helm.notation2.parser.GroupingNotationTest">
        <test-method status="PASS" signature="testGroupingAndOr()[pri:0, instance:org.helm.notation2.parser.GroupingNotationTest@4706efb]" name="testGroupingAndOr" duration-ms="13" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupingAndOr -->
        <test-method status="PASS" signature="testGroupingNotationMixture()[pri:0, instance:org.helm.notation2.parser.GroupingNotationTest@4706efb]" name="testGroupingNotationMixture" duration-ms="14" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupingNotationMixture -->
        <test-method status="PASS" signature="testGroupingNotationMixtureRange()[pri:0, instance:org.helm.notation2.parser.GroupingNotationTest@4706efb]" name="testGroupingNotationMixtureRange" duration-ms="12" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupingNotationMixtureRange -->
        <test-method status="PASS" signature="testGroupingNotationMixtureValue()[pri:0, instance:org.helm.notation2.parser.GroupingNotationTest@4706efb]" name="testGroupingNotationMixtureValue" duration-ms="12" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupingNotationMixtureValue -->
        <test-method status="PASS" signature="testGroupingNotationOR()[pri:0, instance:org.helm.notation2.parser.GroupingNotationTest@4706efb]" name="testGroupingNotationOR" duration-ms="17" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupingNotationOR -->
        <test-method status="PASS" signature="testGroupingNotationOrDefaultValue()[pri:0, instance:org.helm.notation2.parser.GroupingNotationTest@4706efb]" name="testGroupingNotationOrDefaultValue" duration-ms="10" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupingNotationOrDefaultValue -->
      </class> <!-- org.helm.notation2.parser.GroupingNotationTest -->
      <class name="org.helm.notation2.parser.polymer.MonomerNotationGroupTest">
        <test-method status="PASS" signature="MonomerNotationGroupTestOr()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationGroupTest@4d39f593]" name="MonomerNotationGroupTestOr" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MonomerNotationGroupTestOr -->
        <test-method status="PASS" signature="MonomerNotationGroupTestAND()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationGroupTest@4d39f593]" name="MonomerNotationGroupTestAND" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MonomerNotationGroupTestAND -->
      </class> <!-- org.helm.notation2.parser.polymer.MonomerNotationGroupTest -->
      <class name="org.helm.notation2.parser.grouping.GroupingAmbiguityTest">
        <test-method status="PASS" signature="testGrouping()[pri:0, instance:org.helm.notation2.parser.grouping.GroupingAmbiguityTest@7aecc021]" name="testGrouping" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrouping -->
      </class> <!-- org.helm.notation2.parser.grouping.GroupingAmbiguityTest -->
      <class name="org.helm.notation2.parser.ConnectionNotationTest">
        <test-method status="PASS" signature="testConnectionGrouping()[pri:0, instance:org.helm.notation2.parser.ConnectionNotationTest@4533473a]" name="testConnectionGrouping" duration-ms="16" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConnectionGrouping -->
        <test-method status="PASS" signature="testConnectionNotation()[pri:0, instance:org.helm.notation2.parser.ConnectionNotationTest@4533473a]" name="testConnectionNotation" duration-ms="15" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConnectionNotation -->
        <test-method status="PASS" signature="testConnectionNotationTwo()[pri:0, instance:org.helm.notation2.parser.ConnectionNotationTest@4533473a]" name="testConnectionNotationTwo" duration-ms="12" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConnectionNotationTwo -->
      </class> <!-- org.helm.notation2.parser.ConnectionNotationTest -->
      <class name="org.helm.notation2.parser.polymer.PolymerNotationTest">
        <test-method status="PASS" signature="testPolymerNotationAnnotation()[pri:0, instance:org.helm.notation2.parser.polymer.PolymerNotationTest@46a668bc]" name="testPolymerNotationAnnotation" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPolymerNotationAnnotation -->
        <test-method status="PASS" signature="testPolymerNotationIDCHEM()[pri:0, instance:org.helm.notation2.parser.polymer.PolymerNotationTest@46a668bc]" name="testPolymerNotationIDCHEM" duration-ms="1" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPolymerNotationIDCHEM -->
        <test-method status="PASS" signature="testPolymerNotationIDBLOBWithException()[pri:0, instance:org.helm.notation2.parser.polymer.PolymerNotationTest@46a668bc]" name="testPolymerNotationIDBLOBWithException" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <exception class="org.helm.notation2.parser.exceptionparser.NotationException">
            <message>
              <![CDATA[ID is wrong: BLO1]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.helm.notation2.parser.exceptionparser.NotationException: ID is wrong: BLO1
	at org.helm.notation2.parser.notation.ValidationMethod.decideWhichEntity(ValidationMethod.java:175)
	at org.helm.notation2.parser.notation.polymer.PolymerNotation.<init>(PolymerNotation.java:65)
	at org.helm.notation2.parser.polymer.PolymerNotationTest.testPolymerNotationIDBLOBWithException(PolymerNotationTest.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:112)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:205)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:176)
]]>
            </full-stacktrace>
          </exception> <!-- org.helm.notation2.parser.exceptionparser.NotationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPolymerNotationIDBLOBWithException -->
        <test-method status="PASS" signature="testPolymerNotationIDBLOB()[pri:0, instance:org.helm.notation2.parser.polymer.PolymerNotationTest@46a668bc]" name="testPolymerNotationIDBLOB" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPolymerNotationIDBLOB -->
        <test-method status="PASS" signature="testPolymerNotationIDRNA()[pri:0, instance:org.helm.notation2.parser.polymer.PolymerNotationTest@46a668bc]" name="testPolymerNotationIDRNA" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPolymerNotationIDRNA -->
        <test-method status="PASS" signature="testPolymerNotationIDPEPTIDE()[pri:0, instance:org.helm.notation2.parser.polymer.PolymerNotationTest@46a668bc]" name="testPolymerNotationIDPEPTIDE" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPolymerNotationIDPEPTIDE -->
      </class> <!-- org.helm.notation2.parser.polymer.PolymerNotationTest -->
      <class name="org.helm.notation2.parser.polymer.MonomerNotationGroupGroupElementTest">
        <test-method status="PASS" signature="testConstructor()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationGroupGroupElementTest@56c86535]" name="testConstructor" duration-ms="10" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructor -->
        <test-method status="PASS" signature="testConstructorRange()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationGroupGroupElementTest@56c86535]" name="testConstructorRange" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructorRange -->
      </class> <!-- org.helm.notation2.parser.polymer.MonomerNotationGroupGroupElementTest -->
      <class name="org.helm.notation2.parser.annotation.AnnotationNotationTest">
        <test-method status="PASS" signature="testAnnotationConstructor()[pri:0, instance:org.helm.notation2.parser.annotation.AnnotationNotationTest@572632e0]" name="testAnnotationConstructor" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAnnotationConstructor -->
      </class> <!-- org.helm.notation2.parser.annotation.AnnotationNotationTest -->
      <class name="org.helm.notation2.parser.AnnotationNotationTest">
        <test-method status="PASS" signature="testAnnotationNotation()[pri:0, instance:org.helm.notation2.parser.AnnotationNotationTest@62f03cb9]" name="testAnnotationNotation" duration-ms="66" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAnnotationNotation -->
      </class> <!-- org.helm.notation2.parser.AnnotationNotationTest -->
      <class name="org.helm.notation2.parser.NotationTest">
        <test-method status="PASS" signature="testNegativeInput()[pri:0, instance:org.helm.notation2.parser.NotationTest@1d64d42f]" name="testNegativeInput" duration-ms="44" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <exception class="org.helm.notation2.parser.exceptionparser.ExceptionState">
            <full-stacktrace>
              <![CDATA[org.helm.notation2.parser.exceptionparser.ExceptionState: 
	at org.helm.notation2.parser.NotationTest.testNegativeInput(NotationTest.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:112)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:205)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:176)
]]>
            </full-stacktrace>
          </exception> <!-- org.helm.notation2.parser.exceptionparser.ExceptionState -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeInput -->
        <test-method status="PASS" signature="testPositiveInput()[pri:0, instance:org.helm.notation2.parser.NotationTest@1d64d42f]" name="testPositiveInput" duration-ms="483" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositiveInput -->
      </class> <!-- org.helm.notation2.parser.NotationTest -->
      <class name="org.helm.notation2.parser.grouping.GroupingNotationTest">
        <test-method status="PASS" signature="testConstructor()[pri:0, instance:org.helm.notation2.parser.grouping.GroupingNotationTest@7194b2f4]" name="testConstructor" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructor -->
        <test-method status="PASS" signature="testConstructorAmbiguityAND()[pri:0, instance:org.helm.notation2.parser.grouping.GroupingNotationTest@7194b2f4]" name="testConstructorAmbiguityAND" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructorAmbiguityAND -->
        <test-method status="PASS" signature="testConstructorAmbiguityOR()[pri:0, instance:org.helm.notation2.parser.grouping.GroupingNotationTest@7194b2f4]" name="testConstructorAmbiguityOR" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructorAmbiguityOR -->
        <test-method status="PASS" signature="testConstructorWithException()[pri:0, instance:org.helm.notation2.parser.grouping.GroupingNotationTest@7194b2f4]" name="testConstructorWithException" duration-ms="0" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <exception class="org.helm.notation2.parser.exceptionparser.NotationException">
            <message>
              <![CDATA[Group Id is not correct: 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.helm.notation2.parser.exceptionparser.NotationException: Group Id is not correct: 1
	at org.helm.notation2.parser.notation.grouping.GroupingNotation.<init>(GroupingNotation.java:53)
	at org.helm.notation2.parser.grouping.GroupingNotationTest.testConstructorWithException(GroupingNotationTest.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:112)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:205)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:176)
]]>
            </full-stacktrace>
          </exception> <!-- org.helm.notation2.parser.exceptionparser.NotationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConstructorWithException -->
      </class> <!-- org.helm.notation2.parser.grouping.GroupingNotationTest -->
      <class name="org.helm.notation2.parser.polymer.MonomerNotationTest">
        <test-method status="PASS" signature="testMonomerNotationCount()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationTest@cd63cd3]" name="testMonomerNotationCount" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationCount -->
        <test-method status="PASS" signature="testMonomerNotationAnnotation()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationTest@cd63cd3]" name="testMonomerNotationAnnotation" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationAnnotation -->
        <test-method status="PASS" signature="testMonomerNotationDefaultAnnotation()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationTest@cd63cd3]" name="testMonomerNotationDefaultAnnotation" duration-ms="1" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationDefaultAnnotation -->
        <test-method status="PASS" signature="testMonomerNotationID()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationTest@cd63cd3]" name="testMonomerNotationID" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationID -->
        <test-method status="PASS" signature="testMonomerNotationDefaultCount()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationTest@cd63cd3]" name="testMonomerNotationDefaultCount" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationDefaultCount -->
        <test-method status="PASS" signature="testMonomerNotationIDValue()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationTest@cd63cd3]" name="testMonomerNotationIDValue" duration-ms="1" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationIDValue -->
        <test-method status="PASS" signature="testMonomerNotationID_()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationTest@cd63cd3]" name="testMonomerNotationID_" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationID_ -->
      </class> <!-- org.helm.notation2.parser.polymer.MonomerNotationTest -->
      <class name="org.helm.notation2.parser.JSONTest">
        <test-method status="PASS" signature="testJSONTest()[pri:0, instance:org.helm.notation2.parser.JSONTest@29895454]" name="testJSONTest" duration-ms="166" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJSONTest -->
        <test-method status="PASS" signature="testJSONTest2()[pri:0, instance:org.helm.notation2.parser.JSONTest@29895454]" name="testJSONTest2" duration-ms="6" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJSONTest2 -->
      </class> <!-- org.helm.notation2.parser.JSONTest -->
      <class name="org.helm.notation2.parser.polymer.EntityTest">
        <test-method status="PASS" signature="testEntity()[pri:0, instance:org.helm.notation2.parser.polymer.EntityTest@617f84e0]" name="testEntity" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEntity -->
      </class> <!-- org.helm.notation2.parser.polymer.EntityTest -->
      <class name="org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest">
        <test-method status="PASS" signature="testMonomerNotationUnitRNA()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNA" duration-ms="1" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNA -->
        <test-method status="PASS" signature="testMonomerNotationUnitRNAContents()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNAContents" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNAContents -->
        <test-method status="PASS" signature="testMonomerNotationUnitRNAContentsSpecial()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNAContentsSpecial" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNAContentsSpecial -->
        <test-method status="PASS" signature="testMonomerNotationUnitRNAContentsSpecialFour()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNAContentsSpecialFour" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNAContentsSpecialFour -->
        <test-method status="PASS" signature="testMonomerNotationUnitRNAContentsSpecialSeven()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNAContentsSpecialSeven" duration-ms="1" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNAContentsSpecialSeven -->
        <test-method status="PASS" signature="testMonomerNotationUnitRNAContentsSpecialFive()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNAContentsSpecialFive" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNAContentsSpecialFive -->
        <test-method status="PASS" signature="testMonomerNotationUnitRNAContentsSpecialThree()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNAContentsSpecialThree" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNAContentsSpecialThree -->
        <test-method status="PASS" signature="testMonomerNotationUnitRNAContentsSpecialSix()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNAContentsSpecialSix" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNAContentsSpecialSix -->
        <test-method status="PASS" signature="testMonomerNotationUnitRNAContentsSpecialTwo()[pri:0, instance:org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest@7b121a57]" name="testMonomerNotationUnitRNAContentsSpecialTwo" duration-ms="0" started-at="2015-12-04T10:28:09Z" finished-at="2015-12-04T10:28:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMonomerNotationUnitRNAContentsSpecialTwo -->
      </class> <!-- org.helm.notation2.parser.polymer.MonomerNotationUnitRNATest -->
      <class name="org.helm.notation2.parser.OutputWriterTest">
        <test-method status="PASS" signature="testHELM2Output()[pri:0, instance:org.helm.notation2.parser.OutputWriterTest@5970eb6d]" name="testHELM2Output" duration-ms="17" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHELM2Output -->
        <test-method status="PASS" signature="testHELM2OutputExtended()[pri:0, instance:org.helm.notation2.parser.OutputWriterTest@5970eb6d]" name="testHELM2OutputExtended" duration-ms="14" started-at="2015-12-04T10:28:08Z" finished-at="2015-12-04T10:28:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHELM2OutputExtended -->
      </class> <!-- org.helm.notation2.parser.OutputWriterTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
